#!/bin/bash

# =============================
# DISABLED
# =============================

if [[ -f "./.disabled.flag" ]]
then
  echo "./.disabled.flag set. delete to execute"
fi

# =============================
# READ ENV
# =============================

if [[ ! -f "./env" ]]
then
  echo "./env file missing"
  exit 1
fi

. ./env

# =============================
# FUNCTION
# =============================

usage () {
  echo "$1 usage: -NODE_COUNT <number> -THIS_NODE <number> - where THIS_NODE must be less than NODE_COUNT and NODE_COUNT must be > 0"
}

# =============================
# FUNCTIONS
# =============================

node_count() {

  FLAG="`echo "$2" | grep '^[0][0123456789][0123456789]*$' | wc -l | awk '{ print $1 }'`"

  if [[ "${FLAG}" == "1" ]]
  then
    usage "error: invalid NODE_COUNT value '$2'"
    exit 1
  fi

  FLAG="`echo "$2" | grep '^[0123456789]*$' | wc -l | awk '{ print $1 }'`"

  if [[ "${FLAG}" == "1" ]]
  then
    if [[ $2 -eq 0 ]]
    then
      usage "error: invalid NODE_COUNT value '$2'"
      exit 1
    fi
    
    NODE_COUNT=$2
  else
    usage "error: invalid NODE_COUNT value '$2'"
    exit 1
  fi
}

this_node() {
  
  FLAG="`echo "$2" | grep '^[0][0123456789][0123456789]*$' | wc -l | awk '{ print $1 }'`"

  if [[ "${FLAG}" == "1" ]]
  then
    usage "error: invalid THIS_NODE value '$2'"
    exit 1
  fi

  FLAG="`echo "$2" | grep '^[0123456789]*$' | wc -l | awk '{ print $1 }'`"

  if [[ "${FLAG}" == "1" ]]
  then
      
    THIS_NODE=$2
  else
    usage "error: invalid THIS_NODE value '$2'"
    exit 1
  fi
}

# =============================
# PREAMBLE
# =============================

if [[ "${OSTYPE}" != "linux-gnu"* && "${OSTYPE}" != "darwin"* ]]
then
  echo "error: only linux and macOS supported"
  exit 1
fi

if [[ "$#" != "4" ]]
then
  usage "error: missing mandatory arguments."
  exit 1
fi

THIS_NODE=
NODE_COUNT=

if [[ "$1" == "-THIS_NODE" ]]
then

  if [[ "$3" == "-NODE_COUNT" ]]
  then
    node_count "$3" "$4"
  
    this_node "$1" "$2"

  else
    usage "missing arguments."
    exit 1
  fi

elif [[ "$1" == "-NODE_COUNT" ]]
then

  if [[ "$3" == "-THIS_NODE" ]]
  then
    node_count "$1" "$2"

    this_node "$3" "$4"

  else
    usage "missing arguments."
    exit 1
  fi

else
  usage "error: invalid parameters"
  exit 1
fi

let X=1
let DOCKER_NETWORK_HOST=$((DOCKER_NETWORK_START_HOST))

cd "${BITCOIN_BINDIR}"

if [[ "$?" != "0" ]]
then
  usage "error: unable to cd to '${BITCOIN_BINDIR}' "
  exit 1
fi

COMMAND="./${BITCOIN_EXENAME} ${BITCOIN_PARAMS}"

while [[ $X -le $NODE_COUNT ]]
do

  if [[ $X -ne $THIS_NODE ]]
  then

    COMMAND="${COMMAND} -addnode=${DOCKER_NETWORK_BASE_IP}${DOCKER_NETWORK_HOST} "
  fi

  let X=$((X + 1))
  let DOCKER_NETWORK_HOST=$((DOCKER_NETWORK_HOST + 1))

  sleep 1
done

echo "running COMMAND='${COMMAND}'"

if [[ ! -f "./${BITCOIN_EXENAME}" ]]
then
  usage "error: file '${BITCOIN_EXENAME}' missing in `pwd` "
  exit 1
fi

sleep 10

if [[ -f "./.disabled.flag" ]]
then
  echo "skipping command ... delete flag"
else 
  ${COMMAND}  
fi
